package sn.mfdev.usermgt.config;


import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.ImmutableJWKSet;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.web.SecurityFilterChain;
import sn.mfdev.usermgt.services.UserService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    private RsaKeyConfig rsaKeyConfig;
    private UserService userService;

    public SecurityConfig(RsaKeyConfig rsaKeyConfig,UserService userService) {
        this.rsaKeyConfig = rsaKeyConfig;
        this.userService = userService;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws  Exception{
        return http
                .csrf(csrf ->csrf.disable())
                .authorizeRequests(auth -> auth
                        .mvcMatchers("/userapi/users").permitAll()
                        .anyRequest().authenticated())
                .userDetailsService(userService)
                .headers(headers -> headers.frameOptions().sameOrigin())
                .httpBasic(Customizer.withDefaults())
                .build();
    }
    @Bean
    PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

     JwtDecoder  jwtDecoder(){
        return NimbusJwtDecoder.withPublicKey(rsaKeyConfig.rsaPublicKey()).build();
    }
    JwtEncoder jwtEncoder(){
        JWK jwt = new RSAKey.Builder(rsaKeyConfig.rsaPublicKey()).privateKey(rsaKeyConfig.rsaPrivateKey()).build();
        JWKSource<SecurityContext> jwkSource = new ImmutableJWKSet<>(new JWKSet(jwt));
        return  new NimbusJwtEncoder(jwkSource);
    }


}
